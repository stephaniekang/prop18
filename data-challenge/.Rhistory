my_teams %>%
tail()
my_teams %>%
tail()
my_teams <- Teams %>%
filter(yearID > 2000) %>%
select(teamID, yearID, lgID, G, W, L, R, RA)
my_teams %>%
tail()
my_teams <- my_teams %>%
mutate(RD = R- RA, Wpct = W/ (W+L))
run_diff <- ggplot(my_teams, aes(x = RD, y= Wpct)) +
geom_point() +
scale_x_continuous("Run Differential") +
scale_y_continuous("Winning Percentage")
View(run_diff)
run_diff <- show()
show(run_diff)
run_diff <- abline(lm(RD ~ Wpct))
show(run_diff)
run_diff <- abline(my_teams, lm(RD ~ Wpct))
run_diff <- abline(my_teams.RD, my_teams.Wpct)
run_diff <- ggplot(my_teams, aes(x = RD, y= Wpct)) +
geom_point() +
scale_x_continuous("Run Differential") +
scale_y_continuous("Winning Percentage") +
abline(lm(RD ~ Wpct))
run_diff <- ggplot(my_teams, aes(x = RD, y= Wpct)) +
geom_point() +
scale_x_continuous("Run Differential") +
scale_y_continuous("Winning Percentage") +
abline(lm(x ~ y))
show(run_diff)
show(run_diff)
show(run_diff)
source('~/.active-rstudio-document')
rm(list = ls(all = TRUE))
show(run_diff)
show(run_diff)
show(run_diff)
linfit
library(tidyverse)
library(Lahman)
source('~/R Scripts/ch4.R')
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(Lahman)
my_teams %>%
source('~/R Scripts/ch4.R')
source('~/R Scripts/ch4.R')
source('~/R Scripts/ch4.R')
my_teams %>%
my_teams %>%
my_teams %>%
my_teams %>%
my_teams %>%
linfit <- lm(Wpct ~ RD, data = my_teams)
linfit
run_diff +
geom_smooth(method = "lm", se = FALSE, color = crcblue)
run_diff +
geom_smooth(method = "lm", se = FALSE, color = blue)
colors
?colors
run_diff +
geom_smooth(method = "lm", se = FALSE, color = snow)
run_diff +
geom_smooth(method = "lm", se = FALSE)
my_teams_aug <- augment(linfit, data = my_teams)
library(broom)
my_teams_aug <- augment(linfit, data = my_teams)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
base_plot +
geom_point(data = highlight_teams) +
geom_text_repel(data = highlight_teams, aes(label = paste(teamID, yearID)))
base_plot <- ggplot(my_teams_aug, aes(x = RD, y = .resid)) +
geom_point(alpha = 0.3) +
geom_hline(yintecept = 0, linetype = 3) +
xlab("Run differential") + ylab("Residual")
base_plot <- ggplot(my_teams_aug, aes(x = RD, y = .resid)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Run differential") + ylab("Residual")
highlight_teams <- my_teams_aug %>%
arrange(desc(abs(.resid))) %>%
head(4)
library(ggrepel)
base_plot +
geom_point(data = highlight_teams) +
geom_text_repel(data = highlight_teams, aes(label = paste(teamID, yearID)))
rmse <- resid_summary %>%
pull(RMSE)
resid_summary <- my_teams_aug %>%
summarize(N = n(), avg = mean(.resid), RMSE = sqrt(mean(.resid^2)))
resid_summary
rmse <- resid_summary %>%
pull(RMSE)
q()
q()
install.packages("swirl")
library(swirl)
swirl()
set.seed(123)
die1 = sample(1:6, 10000, replace=TRUE)
die2 = sample(1:6, 10000, replace=TRUE)
x = 2*die1 - die2
sum(x == 0)
set.seed(123)
die1 = sample(1:6, 10000, replace=TRUE)
die2 = sample(1:6, 10000, replace=TRUE)
x = 2*die1 - die2
sum(x == 0)
set.seed(123)
die1 = sample(1:6, 10000, replace=TRUE)
die2 = sample(1:6, 10000, replace=TRUE)
x = 2*die1 - die2
die1
sum(x == 0)
sum(x==0)/length(x)
x = c(0,1,2,5,6,10)
p.x = c(0.50, 0.05, 0.10, 0.05, 0.05, 0.25)
discreteRV(x, p.x)
x = c(0,1,2,5,6,10)
p.x = c(0.50, 0.05, 0.10, 0.05, 0.05, 0.25)
res = discreteRV(x, p.x)
x = c(0,1,2,5,6,10)
p.x = c(0.50, 0.05, 0.10, 0.05, 0.05, 0.25)
res = discreteRV(x, p.x)
x = c(0,1,2,5,6,10)
p.x = c(0.50, 0.05, 0.10, 0.05, 0.05, 0.25)
res = discreteRV(x, p.x)
discreteRV = function(x, p.x) {
mux = sum(x*p.x)
sigx = sum((x-mux)^2*p.x)
results = c(mux, sigx)
names(results) = c("Mean", "SD")
return(results)
}
x = c(0,1,2,5,6,10)
p.x = c(0.50, 0.05, 0.10, 0.05, 0.05, 0.25)
res = discreteRV(x, p.x)
res
x = 0:50
p.x = dbinom(0:50, 50, 0.50)
res3 = round(discreteRV(x, p.x), 6)
res3
x = 0:50
p.x = dbinom(x, 50, 0.50)
res3 = round(discreteRV(x, p.x), 6)
res3
x = 0:50
p.x = dbinom(x, 50, 0.50)
res3 = round(discreteRV(x, p.x), 6)
res3
plot(X, p.x)
x = 0:50
p.x = dbinom(x, 50, 0.50)
res3 = round(discreteRV(x, p.x), 6)
res3
plot(x, p.x)
dbinom(4, 10, 0.2)
round(dbinom(4, 10, 0.2), 4)
# P(x >= 2) = 1 - P(X<= 1) = 1 - [P(X=0) + P(X=1)]
1 - (dbinom(0, 10, 0.2) + dbinom(1, 10, 0.2))
# P(x >= 2) = 1 - P(X<= 1) = 1 - [P(X=0) + P(X=1)]
round(1 - (dbinom(0, 10, 0.2) + dbinom(1, 10, 0.2)), 4)
# P(x >= 2) = 1 - P(X<= 1) = 1 - [P(X=0) + P(X=1)]
round(1 - (dbinom(0, 10, 0.2) + dbinom(1, 10, 0.2)), 4)
# Can also do it this way...
1 - pbinom(1, 10, 0.2)
pbinom(6, 10, 0.2)
mu = 10*0.2
sd = round(sqrt(mu*.8), 3)
mu
sd
# We Define the function as follows:
f <- function(x) {
1/sqrt(2 * pi) * exp(-0.5 * x^2)
}
curve(dnorm(x), xlim = c(-3.5, 3.5), ylab = "Density", main = "Standard Normal Density Function")
curve(dnorm(x), xlim = c(-3.5, 3.5), ylab = "Densitty", main = "Standard Normal Density Function")
curve(dnorm(x), xlim = c(-3.5, 3.5), ylab = "Density", main = "Standard Normal Density Function")
curve(pnorm(x), xlim = c(-3.5, 3.5), ylab = "Probability", main = "Standard Normal Cumulative Distribution Function")
?pnorm
# Integrate the function:
integrate(f, lower = -Inf, upper = 1.5)
# Use the standard normal cumulative function pnorm:
# We can specify the mean and standard deviation as well:
# Integrate the function:
integrate(f, lower = -Inf, upper = 1.5)
# Use the standard normal cumulative function pnorm:
pnorm(1.5)
# We can specify the mean and standard deviation as well:
# Integrate the function:
integrate(f, lower = -Inf, upper = 1.5)
# Use the standard normal cumulative function pnorm:
pnorm(1.5)
# We can specify the mean and standard deviation as well:
pnorm(1.5, mean=0, sd=1)
# Integrate the function:
integrate(f, lower = -Inf, upper = 1.5)
# Use the standard normal cumulative function pnorm:
pnorm(1.5)
# We can specify the mean and standard deviation as well:
pnorm(1.5, mean=1, sd=1)
# Integrate the function:
integrate(f, lower = -Inf, upper = 1.5)
# Use the standard normal cumulative function pnorm:
pnorm(1.5)
# We can specify the mean and standard deviation as well:
pnorm(1.5, mean=0, sd=1)
#P(Z < 1.96) - P(Z > 1.96)
pnorm(1.96) - pnorm(-1.96)
#1 - 2*P(Z<-1.96)
#P(Z < 1.96) - P(Z > 1.96)
pnorm(1.96) - pnorm(-1.96)
#1 - 2*P(Z<-1.96)
1 - 2*pnorm(-1.96)
# By hand, we would need to convert 85 into a standardized score, then use tables. We can compute this directly in R
#P(Y > 85) = 1 - P(Y < 85)
1 - pnorm(85, mean=100, sd = 15)
#OR
# By hand, we would need to convert 85 into a standardized score, then use tables. We can compute this directly in R
#P(Y > 85) = 1 - P(Y < 85)
1 - pnorm(85, mean=100, sd = 15)
#OR
pnorm(85, 100, 15), lower.tail=FALSE)
# By hand, we would need to convert 85 into a standardized score, then use tables. We can compute this directly in R
#P(Y > 85) = 1 - P(Y < 85)
1 - pnorm(85, mean=100, sd = 15)
#OR
pnorm(85, 100, 15, lower.tail=FALSE)
# Clear mind :)
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Clear mind :)
library(datasets)  # Load/unload base packages manually
library(datasets)  # Load/unload base packages manually
library(datasets)  # Load/unload base packages manually
library(datasets)  # Load/unload base packages manually
library(datasets)  # Load/unload base packages manually
head(iris)
plot(iris$Species)  # Categorical variable
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
library(tidyverse)
mpg
ggplot(data = mpg) + geom_point(mapping=aes(x=displ, y=hwy))
ggplot(data = mpg)
ggplot(data = mpg)
mtcars
ggplot(data = mpg) + geom_point(mapping=aes(x=hwy, y=cyl))
ggplot(data = mpg) + geom_point(mapping=aes(x=class, y=drv))
ggplot(data = mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class))
ggplot(data = mpg) + geom_point(mapping=aes(x=displ, y=hwy, size=class))
ggplot(data = mpg) + geom_point(mapping=aes(x=displ, y=hwy, shape=class))
?mpg
ggplot(mpg, aes(x = displ, y = hwy, colour = cty)) +
geom_point()
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy))
library(tidyverse)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
?facet_grid
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
library(tidyverse)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ cyl)
data = mpg
data
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(cty ~ cyl)
ggplot(data=mpg) + geom_point(mapping = aes(x=drv, y=cyl))
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy))
facet_grid(drv ~ .)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(drv ~ .)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(. ~ .)
## Clear environment
rm(list=ls(all=TRUE))
## Set working directory
setwd("~/Documents/GitHub/data-challenge")
## Load packages
library(tidyverse)
library(leaflet)
library(tigris)
packages.install(tigris)
q()
install.packages(c("leaflet", "tigris"))
## Clear environment
rm(list=ls(all=TRUE))
## Set working directory
setwd("~/Desktop/data-challenge")
## Set working directory
setwd("Desktop/data-challenge")
## Set working directory
setwd("C:\Users\Grant\Documents\GitHub\prop18\data-challenge")
## Set working directory
setwd("Users\Grant\Documents\GitHub\prop18\data-challenge")
## Set working directory
setwd("Users\\Grant\Documents\GitHub\prop18\data-challenge")
## Set working directory
setwd("Users\\Grant\\Documents\\GitHub\\prop18\\-challenge")
## Set working directory
setwd("Users\\Grant\\Documents\\GitHub\\prop18\\challenge")
## Set working directory
setwd("Users\\Grant\\Documents\\GitHub\\prop18\\data-challenge")
## Set working directory
setwd("C:/Users/Documents/GitHub/prop18/data-challenge")
## Set working directory
setwd("/Users/Documents/GitHub/prop18/data-challenge")
## Set working directory
setwd("/Users/Grant/Documents/GitHub/prop18/data-challenge")
## Load packages
library(tidyverse)
library(leaflet)
library(tigris)
## Import data
youth_vote <- read.csv("02-clean-data/clean_youth_vote_200928.csv")
# Import polygond from shape file
states <- states(cb = T)
# Tiles for US states
states %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup = ~NAME)
## Split dataset by year
youth_vote_16 <- filter(youth_vote, year == 2016)
youth_vote_18 <- filter(youth_vote, year == 2018)
# Merge geospatial data and youth vote data
youth_vote_16 <- geo_join(states, youth_vote_16, "STUSPS", "state_code")
youth_vote_18 <- geo_join(states, youth_vote_18, "STUSPS", "state_code")
## Convert primary voting variable into factor variable
youth_vote_16$primary_17 <- ifelse(youth_vote_16$primary_17 %in% "Y", "Yes", "No")
youth_vote_16$primary_17 <- as.factor(youth_vote_16$primary_17)
youth_vote_18$primary_17 <- ifelse(youth_vote_18$primary_17 %in% "Y", "Yes", "No")
youth_vote_18$primary_17 <- as.factor(youth_vote_18$primary_17)
## Define color palettes for different variables
pal_turnout <- colorFactor("Purples", domain = youth_vote_16$primary_17)
pal_register <- colorFactor("Oranges", domain = youth_vote_18$primary_17)
## Format pop-up text
popup_turnout_16 <- paste0(youth_vote_16$state, "<br>Youth Turnout (2016): ",
as.character(youth_vote_16$turnout * 100), "%")
popup_turnout_18 <- paste0(youth_vote_18$state, "<br>Youth Turnout (2018): ",
as.character(youth_vote_18$turnout * 100), "%")
popup_register_16 <- paste0(youth_vote_16$state, "<br>Youth Registration (2016): ",
as.character(youth_vote_16$register * 100), "%")
popup_register_18 <- paste0(youth_vote_18$state, "<br>Youth Registration (2018): ",
as.character(youth_vote_18$register * 100), "%")
# Generate map for 2016
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_16,
fillColor = ~pal_turnout(youth_vote_16$primary_17),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_turnout_16) %>%
addLegend(pal = pal_turnout,
values = youth_vote_16$primary_17,
position = "bottomright",
title = "States with Primary Voting<br>for 17 year-olds")
# Generate map for 2018
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_18,
fillColor = ~pal_turnout(youth_vote_18$primary_17),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_turnout_18) %>%
addLegend(pal = pal_turnout,
values = youth_vote_18$primary_17,
position = "bottomright",
title = "States with Primary Voting<br>for 17 year-olds")
# Generate map for 2016
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_16,
fillColor = ~pal_register(youth_vote_16$primary_17),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_register_16) %>%
addLegend(pal = pal_register,
values = youth_vote_16$primary_17,
position = "bottomright",
title = "States with Primary Voting<br>for 17 year-olds")
# Generate map for 2018
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_18,
fillColor = ~pal_register(youth_vote_18$primary_17),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_register_18) %>%
addLegend(pal = pal_register,
values = youth_vote_18$primary_17,
position = "bottomright",
title = "States with Primary Voting<br>for 17 year-olds")
## Convert turnout rates into percentile groups as factor variable
youth_vote_16$turnout_per <- as.factor(ifelse(youth_vote_16$turnout <= 0.25, "0%-25%",
ifelse(youth_vote_16$turnout > 0.25 & youth_vote_16$turnout <= 0.51, "26%-50%",
ifelse(youth_vote_16$turnout > 0.50 & youth_vote_16$turnout <= 0.75, "51%-74%",
ifelse(youth_vote_16$turnout > 0.75, "76%-100%",
youth_vote_16$turnout)))))
youth_vote_18$turnout_per <- as.factor(ifelse(youth_vote_18$turnout <= 0.25, "0%-25%",
ifelse(youth_vote_18$turnout > 0.25 & youth_vote_18$turnout <= 0.51, "26%-50%",
ifelse(youth_vote_18$turnout > 0.50 & youth_vote_18$turnout <= 0.75, "51%-74%",
ifelse(youth_vote_18$turnout > 0.75, "76%-100%",
youth_vote_18$turnout)))))
# Create color palette for values
pal_turnout_16 <- colorFactor("Greens", domain = youth_vote_16$turnout_per)
pal_turnout_18 <- colorFactor("Greens", domain = youth_vote_18$turnout_per)
pal_register_16 <- colorFactor("viridis", domain = youth_vote_16$turnout_per)
pal_register_18 <- colorFactor("viridis", domain = youth_vote_18$turnout_per)
# Format for popup text
popup_turnout_16 <- paste0(youth_vote_16$state, "<br>Turnout: ", as.character(youth_vote_16$turnout * 100), "%",
"<br>17-year-old Primary Voting: ", youth_vote_16$primary_17)
popup_turnout_18 <- paste0(youth_vote_18$state, "<br>Turnout: ", as.character(youth_vote_18$turnout * 100), "%",
"<br>17-year-old Primary Voting: ", youth_vote_18$primary_17)
popup_register_16 <- paste0(youth_vote_16$state, "<br>Youth Registered: ", as.character(youth_vote_16$turnout * 100), "%",
"<br>17-year-old Primary Voting: ", youth_vote_16$primary_17)
popup_register_18 <- paste0(youth_vote_18$state, "<br>Youth Registered: ", as.character(youth_vote_18$turnout * 100), "%",
"<br>17-year-old Primary Voting: ", youth_vote_18$primary_17)
# Generate map for 2016 turnout
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_16,
fillColor = ~pal_turnout_16(youth_vote_16$turnout_per),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_turnout_16) %>%
addLegend(pal = pal_turnout_16,
values = youth_vote_16$turnout_per,
position = "bottomright",
title = "Youth Voter Turnout<br>in 2016 Elections")
# Generate map for 2018 turnout
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_18,
fillColor = ~pal_turnout_18(youth_vote_16$turnout_per),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_turnout_18) %>%
addLegend(pal = pal_turnout_18,
values = youth_vote_18$turnout_per,
position = "bottomright",
title = "Youth Voter Turnout<br>in 2016 Elections")
# Generate map for 2016 registration
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_16,
fillColor = ~pal_register_16(youth_vote_16$turnout_per),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_register_16) %>%
addLegend(pal = pal_register_16,
values = youth_vote_16$turnout_per,
position = "bottomright",
title = "Youth Voter Registration<br>in 2016 Elections")
# Generate map for 2018 registration
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = youth_vote_18,
fillColor = ~pal_register_18(youth_vote_16$turnout_per),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_register_18) %>%
addLegend(pal = pal_register_18,
values = youth_vote_18$turnout_per,
position = "bottomright",
title = "Youth Voter Registration<br>in 2018 Elections")
